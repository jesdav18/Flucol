<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        /zGM//8xgP//AcD//wPj///H//////////8=
</value>
  </data>
</root>